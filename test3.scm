(include "assign3.scm")

(println "Assignment 3 Test Script: VERSION 1\n")

(println "author...\n")
(author)
(println)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests---------------------\n")
        (println "(define (square x) (* x x))")
        (define (square x) (* x x))
        (inspect (nonlocals square))
        (println "    [it should return (* begin)]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 2:")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests---------------------\n")
        (println "(define (square x) (* x x))")
        (define (square x) (* x x))
        (inspect (replace square '* +))
        (inspect (square 2))
        (println "    [it should be 4]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests---------------------\n")
        (println "(define t (avl))")
        (define t (avl))
        (inspect ((t 'size)))
        (println "    [it should be 0]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests---------------------\n")
        (inspect (no-locals '(define (f) (define x 3) 1)))
        (println "    [it should be (define (f) ((lambda (x) 1) 3))")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests---------------------\n")
        (define (f a) (cons 1 a))
        (define two (lambda (f) (lambda (x) (f (f x)))))
        (define three (lambda (f) (lambda (x) (f (f (f x))))))
        (inspect (barrier))
        (inspect (barrier 'set 1))
        (inspect (barrier 'install))
        (inspect (barrier 'remove))
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests---------------------\n")
        (inspect (treeflatten (treeNode 1 nil nil)))
        (println "    [it should be (((0 1))]")
        (inspect (stream-display (big-gulp) 1))
        (println "    [it should be [7,...]]")
        (inspect (stream-car (stream-cdr (big-gulp))))
        (println "    [it should be 11]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests---------------------\n")
        (inspect (define (f x) (* x x)))
        (inspect (stream-car (signal f 1 0.01)))
        (println "    [it should be 1]")
        (inspect (stream-car poly))
        (println "    [it should be 0]")
        (inspect (stream-car intPoly))
        (inspect (stream-car (integral poly 0.01)))
        (println "    [they should be the same]")
        (inspect (stream-car divIntPoly))
        (inspect (stream-car poly))
        (println "    [they should be the same]")
        (inspect (differential poly 0.01))
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests---------------------\n")
        (inspect (stream-car (mystery 1)))
        (println "    [it should be 1]")
        (inspect (stream-car (ps-mystery 1)))
        (println "    [it should be 1]")
        (inspect (stream-car (acc-mystery 1)))
        (println "    [it should be 1]")
        (inspect (stream-car (super-mystery 1)))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests---------------------\n")
        (inspect (stream-car (ramanujan)))
        (println "    [it should be 1729]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(author)
(println)
(println "this test script ran to completion\n");
