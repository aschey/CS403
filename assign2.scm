(define (author)
  (println "AUTHOR: Austin Schey aeschey@crimson.ua.edu")
  )
(define (iterate # $var vals $)
  (define f (append (list 'lambda (list $var)) $))
  (define func (eval f #))
  (define (iterList items)
    (cond 
      ((not (null? items))
       (func (car items))
       (iterList (cdr items))
       )
      )
    )
  (iterList vals)
  )

(define (run1)
  (iterate i (list 1 2 3) 
           (inspect i) 
           (inspect (* i i)) 
           (inspect (* i i i )))
)
;(run1)

(define (peval f @)
  (define (callFunc remaining params)
    (define func (cons 'f (merge remaining params (list))))
    (eval func this)
    )
  (define (merge remaining params store)
    (cond
      ((= (length params) 0) store)
      (else
        (let ((curParam (car params))
              (nextParams (cdr params)))
              (if (eq? curParam 'MISSING) 
                (merge (cdr remaining) nextParams (append store (list (car remaining))))
                (merge remaining nextParams (append store (list curParam)))
                )
              )
        )
      )
    )
  (define params @)
  (lambda (@) (callFunc @ params))
)

(define (run2)
  (define (f a b c) (inspect a) (inspect b) (inspect c))
  (define . 'MISSING)
  (inspect ((peval f 1 . 2) 1 2))
  ;(inspect (peval f 1 2 .))
  )
;(run2)

(define (Stack) (_Stack (list)))

(define (_Stack store) this)

(define (storeEmpty stack)
  (= (length (stack 'store)) 0)
  )

(define (push stack val)
  (_Stack (cons val (stack 'store)))
  )

(define (pop stack)
  (if (storeEmpty stack)
    nil
   (_Stack (cdr (stack 'store)))
   )
  )

(define (speek stack)
  (if (storeEmpty stack)
    nil
    (car (stack 'store))
    )
  )

(define (ssize stack)
  (length (stack 'store))
  )

(define (Queue) (_Queue (Stack) (Stack)))
  
(define (_Queue inbox outbox) this)

(define (outboxEmpty queue)
  (= (ssize (queue 'outbox)) 0)
  )

(define (inboxEmpty queue)
  (= (ssize (queue 'inbox)) 0)
  )

(define (enqueue queue val)
  (_Queue (push (queue 'inbox) val) (queue 'outbox))
  )

(define (makeOutbox in out)
  (cond 
    ((> (ssize in) 0)
     (define nextVal (speek in))
     (makeOutbox (pop in) (push out nextVal))
     )
    (else
      (_Queue in out)
      )
    )
  )

(define (dequeue queue)
  (cond 
    ((outboxEmpty queue)
     (if (inboxEmpty queue)
       nil
       (dequeue (makeOutbox (queue 'inbox) (queue 'outbox)))
       )
     )
    (else (_Queue (queue 'inbox) (pop (queue 'outbox))))
    )
  )

(define (qpeek queue)
  (cond
    ((outboxEmpty queue) 
     (if (inboxEmpty queue)
       nil
       (qpeek (makeOutbox (queue 'inbox) (queue 'outbox)))
       )
     )
    (else (speek (queue 'outbox)))
    )
  )

(define (run3)
  (define s (Stack))
  (define s2 (push s 3))
  (inspect (speek s2))
  (define s3 (push s2 4))
  (inspect (speek s3))
  (define s4 (pop s3))
  (inspect (speek s4))
  (inspect (ssize s4))
  (define s5 (pop s4))
  (inspect (speek s5))
  )

(define (run3test)
  ;(define n1 (Node 1 nil))
  ;(define l1 (LinkedList n1))
  ;(define l2 ((l1 'addToBack) 2))
  ;(inspect (l2 'tail))
  (define q (Queue))
  (define q2 (enqueue q 1))
  ;(inspect ((q2 'outbox) 'store))
  (inspect (qpeek q2))
  (define q3 (enqueue q2 2))
  (define q4 (dequeue q3))
  (inspect (qpeek q4))
  (define q5 (dequeue q4))
  (inspect (qpeek q5))
 ) 

;(run3)
;(run3test)

(define (no-locals code)
  (define def (car code))
  (define signature (cadr code))

  (define (construct sig body params)
    (cons (list 'lambda sig body) params)
    )
  (define (any? search ref)
    (cond
      ((null? search) #f)
      ((member? (car search) ref) #t)
      (else (any? (cdr search) ref))
      )
    )

  (define (no-locals-iter remaining sig body params)
    (cond
      ((null? remaining)
       (construct sig body params)
       )
       (else
         (define current (car remaining))
         (cond
           ((eq? (car current) 'define) 
            (define varName (cadr current))
            (define defBody (caddr current))
            (if (any? sig defBody)
              (construct sig (no-locals-iter (cdr remaining) (list varName) body (list defBody)) params) 
              (no-locals-iter (cdr remaining) (cons varName sig) body (cons defBody params))
              )
            )
            (else
              (no-locals-iter (cdr remaining) sig (append current body) params)
              )
            )
         )
       )
    )
   (define funcBody (no-locals-iter (cddr code) (list) (list) (list)))
   (list def signature funcBody)
  )

(define (run4)
  (inspect (no-locals (quote (define (nsq a) (define x (+ 1 1)) (define y (+ x x)) (+ x y)))))
  (inspect (no-locals (quote (define (nsq a) (define x (+ 1 1)) (+ x x)))))
  (inspect (no-locals (quote (define (nsq a) (define i (+ 1 1)) (define x (+ a 1)) (define y (+ x x)) (define j (+ 2 2)) (* y y x i j)))))
  )

(run4)
