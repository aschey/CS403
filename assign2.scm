(define (author)
  (println "AUTHOR: Austin Schey aeschey@crimson.ua.edu")
  )
(define (iterate # $var vals $)
  ;(define (eval $var) 1)
  (ppTable #)
  (define (iterList items)
    (cond
      ((not (null? items))
       (iterFuncs (car items) $)
       (iterList (cdr items))
       )
      )
    )
  (define (iterFuncs value funcs)
    (cond
      ((not (null? funcs))
       ;(define (eval $var this) value)
       (addSymbol $var value this)
       (eval (car funcs) this)
       ;(define f (lambda (i) (eval (car funcs) #)))
       ;(f (eval $var #))
       ;(eval (car funcs) this)
       (iterFuncs value (cdr funcs))
       )
      )
    )
  (iterList vals)
  )

(define (run5)
  (iterate i (list 1 2 3) (inspect i) (inspect (* i i)) (inspect (* i i i )))
)

(define (peval f @)
  (define (callFunc remaining params)
    (define func (append (list 'f) (merge remaining params (list))))
    (eval func this)
    )
  (define (merge remaining params store)
    (cond
      ((= (length params) 0) store)
      (else
        (let ((curParam (car params))
              (nextParams (cdr params)))
              (if (eq? curParam 'MISSING) 
                (merge (cdr remaining) nextParams (append store (list (car remaining))))
                (merge remaining nextParams (append store (list curParam)))
                )
              )
        )
      )
    )
  (define params @)
  (lambda (@) (callFunc @ params))
)

(define (run2)
  (define (f a b c) (inspect a) (inspect b) (inspect c))
  (define . 'MISSING)
  (inspect ((peval f 1 . 2) 1 2))
  ;(inspect (peval f 1 2 .))
  )
;(run2)

(define (Node val next)
  (define (setNext nextVal)
    (Node val (Node nextVal nil))
    )

(define (_LinkedList head tail)
  (define (addToBack val)
    (define newTail ((tailNode setNext) val))
    (_LinkedList head newTail)
    )


(define (_Stack store)
  (define (push val)
    (_Stack (cons val store))
    )
  (define (pop)
    (_Stack (cdr store))
    )
  (define (speek)
    (car store)
    )
  (define (ssize)
    (length store)
    )
  this
  )

(define (Stack)
  (_Stack (list))
  )

(define (_Queue s)
  (define store s)
  
  (define (enqueue val)
    )

  (define (dequeue)
    )

  (define (qpeek)
    (car (store))
    )

  (define (qsize)
    (length store)
    )
  this
  )

(define (Queue)
  (_Queue (list))
  )

(define (run3)
  (define s (Stack))
  (define s2 ((s 'push) 3))
  (inspect (s2 'store))
  (define s3 ((s2 'push) 4))
  (inspect ((s3 'speek)))
  (define s4 ((s3 'pop)))
  (inspect ((s4 'speek)))
  )

(run3)

