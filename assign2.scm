(define (author)
  (println "AUTHOR: Austin Schey aeschey@crimson.ua.edu")
  )
(define (iterate # $var vals $)
  (define f (append (list 'lambda (list $var)) $))
  (define func (eval f #))
  (define (iterList items)
    (cond 
      ((not (null? items))
       (func (car items))
       (iterList (cdr items))
       )
      )
    )
  (iterList vals)
  )

(define (run1)
  (iterate i (list 1 2 3) 
           (inspect i) 
           (inspect (* i i)) 
           (inspect (* i i i )))
)
;(run1)

(define (peval f @)
  (define (callFunc remaining params)
    (define func (cons 'f (merge remaining params (list))))
    (eval func this)
    )
  (define (merge remaining params store)
    (cond
      ((= (length params) 0) store)
      (else
        (let ((curParam (car params))
              (nextParams (cdr params)))
              (if (eq? curParam 'MISSING) 
                (merge (cdr remaining) nextParams (append store (list (car remaining))))
                (merge remaining nextParams (append store (list curParam)))
                )
              )
        )
      )
    )
  (define params @)
  (lambda (@) (callFunc @ params))
)

(define (run2)
  (define (f a b c) (inspect a) (inspect b) (inspect c))
  (define . 'MISSING)
  (inspect ((peval f 1 . 2) 1 2))
  ;(inspect (peval f 1 2 .))
  )
;(run2)

(define (Node val next)
  (define (setNext nextVal)
    (Node val (Node nextVal nil))
    )
  )

(define (_LinkedList head tail)
  (define (addToBack val)
    (if (eq? tail nil)
      (define newTail ((head 'setNext) val))
      (define newTail ((tail 'setNext) val))
      )
    (_LinkedList head newTail)
    )
  this
  )

(define (LinkedList head)
  (_LinkedList head nil)
  )


(define (_Stack store)
  (define (push val)
    (_Stack (cons val store))
    )
  (define (pop)
    (_Stack (cdr store))
    )
  (define (speek)
    (car store)
    )
  (define (ssize)
    (length store)
    )
  this
  )

(define (Stack)
  (_Stack (list))
  )

(define (_Queue s)
  (define store s)
  
  (define (enqueue val)
    )

  (define (dequeue)
    )

  (define (qpeek)
    (car (store))
    )

  (define (qsize)
    (length store)
    )
  this
  )

(define (Queue)
  (_Queue (list))
  )

(define (run3)
  (define s (Stack))
  (define s2 ((s 'push) 3))
  (inspect (s2 'store))
  (define s3 ((s2 'push) 4))
  (inspect ((s3 'speek)))
  (define s4 ((s3 'pop)))
  (inspect ((s4 'speek)))
  )
(define (run3test)
  (define n1 (Node 1 nil))
  (define l1 (LinkedList n1))
  (define l2 ((l1 'addToBack) 2))
  (inspect (l2 'tail))
 ) 

;(run3)
(run3test)
