(exp 2 4)
(exp 2)
(expt 2 4)
1.000000e-06
(abs 2)
(< 0 1.000000e-06)
(< (abs (/ 2 2)) 1.000000e-06)
(> (abs (/ 2 2)) 1.000000e-06)
(abs (/ 2 2))
(define (test $la) println ($la))
test
(= 1 1 1 1)
(= 1 1 1 2)
(min 3 4)
import
load
(load)
(import)
(open "assign1.scm")
(include "assign1.scm")
load
import
(include assign1.scm)
(include "assign1.scm")
(run1)
(min5 0 0 0 0 0)
(min5 -2 3 4 5 3)
(min5 -2 3 4 5 3)
(min5 10 9 8 7 5)
(min5 1 2 2 2 2)
(min5 2 2 2 2 1)
(min5 2 1 2 2 2)
(min5 2 2 1 2 2)
(min5 2 2 2 1 2)
(cym 100)
(cym 0)
(cym 50)
(run9)
(load "assign1.scm")
(include "assign1.scm")
(mystery 9 1 (lambda n) (+ (* 4 n) 1))
(lambda n)
1
(include "assign1.scm")
(mystery 9 1 (lambda n) (+ (* 4 n) 1))
(load "assign1.scm")
(include "assign1.scm")
(mystery 9 1 (lambda (n) (+ (* 4 n) 1)) (lambda (n) 1))
(mystery 100 1 (lambda (n) (+ (* 4 n) 1)) (lambda (n) 1))
(mystery 1000 1 (lambda (n) (+ (* 4 n) 1)) (lambda (n) 1))
(mystery 1000 1 (lambda n 1) (lambda (n) (+ (* 4 n) 1)))
(include "assign1")
(run1)
(include "assign1.scm")
(run1)
(cym 0)
(cym 25)
(cym 50)
(cym 75)
(cym 100)
(cym 99)
cym
(1)
(cym 1)
(run1)
(include "assign1.scm")
(include "assign1.scm")
(include "assign1.scm")
(egypt/ 3223 2342)
(egypt/ 4684 2342)
(egypt/ 4683 2342)
(ramanujan 4)
(ramanujan 3)
(ramanujan 0)
(define f a b c d=5)
(define a "a")
(= a "a")
(+ 2 +)
(. +)
(. + +)
(dot 2)
(. 2)
(. 2 2)
.
2.2000000000
(environment)
(eq? 2)
(eq? +)
(eq? #f)
(eval 0)
(true? 0)
(true? 1)
(true? +)
(. 2 (1 2))
(dot 2 (1 2))
(2 1)
(number? 3)
(? a)
(ppTable this)
e
e
(= e 2)
(> +)
(> 2)
(> -3)
(> 2 +)
(> + 2)
(not +)
(not 1)
(define a (list 1 2 3 4))
(cadr a)
(caadr a)
(caar a)
a
(cdr a)
(cddr a)
(define (gcd m n) (if (= n 0) m (gcd n (% m n))))
(gcd 412 63)
63
%
378
63
*
6
(% 412 63)
(% 63 34)
(% 34 29)
(% 29 5)
(% 5 4)
(4 % 1)
(% 4 1)
(% 123 31)
(31 % 30)
(% 31 30)
(% 30 1)
(lambda (x) ((lambda (x y) (- x y)) 10 6))
(define (a b c d e f) (define (iter x y) (if (= y c) x (iter (f x y) (e y)))) (iter d b))
(a 1 5 0 + (lambda (x) (+ x 1)))
(a 1 5 0 (lambda (x) (+ x 1)) +)
(+ 1 2 3 4 5)
(a 1 5 5 (lambda (x) (+ x 1)) +)
(length (list 1 2))
(car (list 1 2))
(append (array 2 3) 2)
(append (array 2 3) (list 2))
(append (array 2 3) (array 2))
(define q (list 1 2 3 4))
(caar q)
q
(define q (list 1 2 3 4))
q
(println "sdfs")
(define a quote (define (nsq a) (define x (+ a 1)) (* x x)))
(define a (define (nsq a) (define x (+ a 1)) (* x x)))
(define a (quote (define (nsq a) (define x (+ a 1)) (* x x))))
a
(car (cddr a))
(cddr a)
a
(define b (cddr a))
a
b
(car b)
b
(car (car b))
(cdr b)
a
b
(car b)
(define current (car b))
current
(define varName (cadr current))
(caddr current)
current
a
b
current
body
current
b
(cdr b)
b
(cdr b)
:q
