(include "assign2.scm")

(println "Assignment 2 Test Script: VERSION 1\n")

(println "author...\n")
(author)
(println)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests---------------------\n")
        (iterate i (list 1) (inspect i))
        (println "    [it should print i is 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 2:")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests---------------------\n")
        (define (f x y z) (+ x y z))
        (inspect ((peval f 'MISSING 'MISSING 'MISSING) 1 2 3))
        (println "    [it should be 6]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests---------------------\n")
        (inspect (speek (pop (push (push (Stack) 1) 2))))
        (println "    [it should be 1]")
        (inspect (qpeek (dequeue (enqueue (enqueue (Queue) 2) 1))))
        (println "    [it should be 1]")
        (inspect (list speek ssize))
        (inspect (list qpeek qsize))
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests---------------------\n")
        (inspect (no-locals '(define (f) (define x 3) 1)))
        (println "    [it should be (define (f) ((lambda (x) 1) 3))")
        )
    (println " NOT IMPLEMENTED")
    )
(println)


(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests---------------------\n")
        (define (f a) (cons 1 a))
        (define two (lambda (f) (lambda (x) (f (f x)))))
        (define three (lambda (f) (lambda (x) (f (f (f x))))))
        (inspect (equal? ((two f) nil) ((three f) nil)))
        (println "    [it should be #f]")
        (inspect (equal? ((two f) nil) (((pred three) f) nil)))
        (println "    [it should be #t]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests---------------------\n")
        (inspect (treeflatten (treeNode 1 nil nil)))
        (println "    [it should be (((0 1))]")
        (inspect (treedepth (treeNode 1 nil nil)))
        (println "    [it should be 0.0]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests---------------------\n")
        (inspect (queens 2))
        (println "    [it should be ()]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests---------------------\n")
        (inspect ((cxr 'd) (cons 1 1)))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests---------------------\n")
        (inspect apply-generic)
        (inspect (install-generic))
        (inspect (+ 0 0))
        (println "    [it should be 0")
        (inspect (- 0 0))
        (println "    [it should be 0]")
        (inspect (* 0 0))
        (println "    [it should be 0]")
        (inspect (* 0 1))
        (println "    [it should be 0]")
        (inspect (uninstall-generic))
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 10:")
(if (defined? 'run10 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run10)
        (println "\n-------my tests---------------------\n")
        (inspect (install-coercion))
        (inspect (coerce 1 'REAL))
        (println "    [it should be 1.0]")
        (inspect (type (coerce 1 'REAL)))
        (println "    [it should be REAL]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
(author)
(println)
(println "this test script ran to completion\n");
